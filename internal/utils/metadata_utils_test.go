package utils

import (
	"os"
	"path/filepath"
	"testing"
)

func TestMetadataOperations(t *testing.T) {
	// Create temporary directory for test
	tempDir, err := os.MkdirTemp("", "gophex-metadata-test-*")
	if err != nil {
		t.Fatalf("Failed to create temp directory: %v", err)
	}
	defer os.RemoveAll(tempDir)

	// Create a simple gophex.md file
	metadataContent := `# Gophex Project Metadata

This file contains project metadata and progress tracking for Gophex-generated projects.
**Do not edit this file manually** - it is automatically maintained by Gophex.

` + "```json\n" + `{
  "project": {
    "name": "testproject",
    "type": "api",
    "last_updated": "2025-01-01T00:00:00Z"
  },
  "database": {
    "migrations_executed": false,
    "schema_initialized": false
  },
  "activities": {
    "project_generated": {
      "completed": true,
      "timestamp": "2025-01-01T00:00:00Z",
      "can_repeat": false
    },
    "dependencies_installed": {
      "completed": false,
      "can_repeat": true
    }
  }
}
` + "```\n"

	metadataPath := filepath.Join(tempDir, "gophex.md")
	err = os.WriteFile(metadataPath, []byte(metadataContent), 0644)
	if err != nil {
		t.Fatalf("Failed to write metadata file: %v", err)
	}

	// Test HasGophexMetadata
	if !HasGophexMetadata(tempDir) {
		t.Error("HasGophexMetadata should return true")
	}

	// Test IsActivityCompleted
	if !IsActivityCompleted(tempDir, "project_generated") {
		t.Error("project_generated should be completed")
	}

	if IsActivityCompleted(tempDir, "dependencies_installed") {
		t.Error("dependencies_installed should not be completed")
	}

	// Test GetActivityPrefix
	if prefix := GetActivityPrefix(tempDir, "project_generated"); prefix != "re-" {
		t.Errorf("Expected 're-' prefix for completed activity, got: %s", prefix)
	}

	if prefix := GetActivityPrefix(tempDir, "dependencies_installed"); prefix != "" {
		t.Errorf("Expected empty prefix for incomplete activity, got: %s", prefix)
	}

	// Test UpdateActivity
	err = UpdateActivity(tempDir, "dependencies_installed", true)
	if err != nil {
		t.Fatalf("Failed to update activity: %v", err)
	}

	// Verify the activity was updated
	if !IsActivityCompleted(tempDir, "dependencies_installed") {
		t.Error("dependencies_installed should be completed after update")
	}

	// Test GetActivityPrefix for completed repeatable activity
	if prefix := GetActivityPrefix(tempDir, "dependencies_installed"); prefix != "re-" {
		t.Errorf("Expected 're-' prefix for completed repeatable activity, got: %s", prefix)
	}

	// Test UpdateDatabaseStatus
	err = UpdateDatabaseStatus(tempDir, true, true)
	if err != nil {
		t.Fatalf("Failed to update database status: %v", err)
	}

	// Verify database status was updated
	metadata, err := LoadMetadata(tempDir)
	if err != nil {
		t.Fatalf("Failed to load metadata: %v", err)
	}

	if !metadata.Database.MigrationsExecuted {
		t.Error("MigrationsExecuted should be true")
	}

	if !metadata.Database.SchemaInitialized {
		t.Error("SchemaInitialized should be true")
	}
}

func TestMetadataWithNonExistentFile(t *testing.T) {
	tempDir, err := os.MkdirTemp("", "gophex-metadata-test-*")
	if err != nil {
		t.Fatalf("Failed to create temp directory: %v", err)
	}
	defer os.RemoveAll(tempDir)

	// Test with non-existent metadata file
	if HasGophexMetadata(tempDir) {
		t.Error("HasGophexMetadata should return false for non-existent file")
	}

	if IsActivityCompleted(tempDir, "some_activity") {
		t.Error("IsActivityCompleted should return false for non-existent file")
	}

	if prefix := GetActivityPrefix(tempDir, "some_activity"); prefix != "" {
		t.Errorf("Expected empty prefix for non-existent file, got: %s", prefix)
	}
}
