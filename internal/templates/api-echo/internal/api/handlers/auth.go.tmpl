package handlers

import (
	"encoding/json"
	"net/http"

	"{{.ModuleName}}/internal/api/responses"
	"{{.ModuleName}}/internal/domain/user"
	"{{.ModuleName}}/internal/pkg/validator"
)

type AuthHandler struct {
	userService user.Service
	validator   *validator.Validator
}

func NewAuthHandler(userService user.Service, validator *validator.Validator) *AuthHandler {
	return &AuthHandler{
		userService: userService,
		validator:   validator,
	}
}

type LoginRequest struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required,min=6"`
}

type RegisterRequest struct {
	Name     string `json:"name" validate:"required,min=2,max=100"`
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required,min=6"`
}

// Login godoc
// @Summary User login
// @Description Authenticate user and return JWT token
// @Tags auth
// @Accept json
// @Produce json
// @Param request body LoginRequest true "Login credentials"
// @Success 200 {object} responses.SuccessResponse
// @Failure 400 {object} responses.ErrorResponse
// @Failure 401 {object} responses.ErrorResponse
// @Router /auth/login [post]
func (h *AuthHandler) Login(w http.ResponseWriter, r *http.Request) {
	var req LoginRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		responses.Error(w, http.StatusBadRequest, "Invalid request body", err)
		return
	}

	if err := h.validator.Validate(req); err != nil {
		responses.ValidationError(w, err)
		return
	}

	token, err := h.userService.Login(r.Context(), req.Email, req.Password)
	if err != nil {
		responses.Error(w, http.StatusUnauthorized, "Invalid credentials", err)
		return
	}

	responses.Success(w, http.StatusOK, "Login successful", map[string]interface{}{
		"token": token,
	})
}

// Register godoc
// @Summary User registration
// @Description Register a new user account
// @Tags auth
// @Accept json
// @Produce json
// @Param request body RegisterRequest true "Registration details"
// @Success 201 {object} responses.SuccessResponse
// @Failure 400 {object} responses.ErrorResponse
// @Failure 409 {object} responses.ErrorResponse
// @Router /auth/register [post]
func (h *AuthHandler) Register(w http.ResponseWriter, r *http.Request) {
	var req RegisterRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		responses.Error(w, http.StatusBadRequest, "Invalid request body", err)
		return
	}

	if err := h.validator.Validate(req); err != nil {
		responses.ValidationError(w, err)
		return
	}

	userModel := &user.User{
		Name:     req.Name,
		Email:    req.Email,
		Password: req.Password,
	}

	createdUser, err := h.userService.Create(r.Context(), userModel)
	if err != nil {
		responses.Error(w, http.StatusConflict, "Failed to create user", err)
		return
	}

	responses.Success(w, http.StatusCreated, "User created successfully", map[string]interface{}{
		"user": createdUser,
	})
}