package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"{{.ModuleName}}/internal/api/routes"
	"{{.ModuleName}}/internal/config"
	"{{.ModuleName}}/internal/database"{{if .RedisConfig.Enabled}}
	"{{.ModuleName}}/internal/infrastructure/database/redis"{{end}}
	"{{.ModuleName}}/internal/pkg/logger"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Initialize logger
	logger := logger.New(cfg.LogLevel)

	// Create Echo instance
	e := echo.New()
	
	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORS())

	// Initialize database
	ctx := context.Background()
	db, err := database.InitializeDatabase(ctx, logger)
	if err != nil {
		logger.Fatal("Failed to initialize database", "error", err)
	}
	defer db.Close()

{{if .RedisConfig.Enabled}}	// Initialize Redis
	redisClient, err := redis.Connect(cfg.Database.RedisURL)
	if err != nil {
		logger.Fatal("Failed to connect to Redis", "error", err)
	}
	defer redisClient.Close()

	// Setup Echo routes
	routes.SetupEcho(e, db, redisClient, logger, cfg)
{{else}}	// Setup Echo routes
	routes.SetupEcho(e, db, logger, cfg)
{{end}}

	// Start server in a goroutine
	go func() {
		logger.Info("Starting {{.ProjectName}} API server", "port", cfg.Server.Port)
		if err := e.Start(fmt.Sprintf(":%d", cfg.Server.Port)); err != nil && err != http.ErrServerClosed {
			logger.Fatal("Failed to start server", "error", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Info("Shutting down server...")

	// Create a deadline for shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Attempt graceful shutdown
	if err := e.Shutdown(ctx); err != nil {
		logger.Fatal("Server forced to shutdown", "error", err)
	}

	logger.Info("Server exited")
}