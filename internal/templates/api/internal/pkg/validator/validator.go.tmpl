package validator

import (
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"
)

type Validator struct{}

type FieldError struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

func New() *Validator {
	return &Validator{}
}

func (v *Validator) Validate(s interface{}) []FieldError {
	var errors []FieldError
	
	val := reflect.ValueOf(s)
	typ := reflect.TypeOf(s)
	
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
		typ = typ.Elem()
	}
	
	for i := 0; i < val.NumField(); i++ {
		field := val.Field(i)
		fieldType := typ.Field(i)
		
		tag := fieldType.Tag.Get("validate")
		if tag == "" {
			continue
		}
		
		fieldName := getFieldName(fieldType)
		fieldErrors := v.validateField(fieldName, field, tag)
		errors = append(errors, fieldErrors...)
	}
	
	return errors
}

func (v *Validator) validateField(fieldName string, field reflect.Value, tag string) []FieldError {
	var errors []FieldError
	
	rules := strings.Split(tag, ",")
	for _, rule := range rules {
		rule = strings.TrimSpace(rule)
		
		if err := v.applyRule(fieldName, field, rule); err != nil {
			errors = append(errors, *err)
		}
	}
	
	return errors
}

func (v *Validator) applyRule(fieldName string, field reflect.Value, rule string) *FieldError {
	parts := strings.Split(rule, "=")
	ruleName := parts[0]
	
	switch ruleName {
	case "required":
		if v.isEmpty(field) {
			return &FieldError{
				Field:   fieldName,
				Message: fmt.Sprintf("%s is required", fieldName),
			}
		}
	case "email":
		if field.Kind() == reflect.String {
			email := field.String()
			if email != "" && !v.isValidEmail(email) {
				return &FieldError{
					Field:   fieldName,
					Message: fmt.Sprintf("%s must be a valid email address", fieldName),
				}
			}
		}
	case "min":
		if len(parts) > 1 {
			minVal, _ := strconv.Atoi(parts[1])
			if field.Kind() == reflect.String {
				if len(field.String()) < minVal {
					return &FieldError{
						Field:   fieldName,
						Message: fmt.Sprintf("%s must be at least %d characters", fieldName, minVal),
					}
				}
			}
		}
	case "max":
		if len(parts) > 1 {
			maxVal, _ := strconv.Atoi(parts[1])
			if field.Kind() == reflect.String {
				if len(field.String()) > maxVal {
					return &FieldError{
						Field:   fieldName,
						Message: fmt.Sprintf("%s must be at most %d characters", fieldName, maxVal),
					}
				}
			}
		}
	case "omitempty":
		// Skip validation if field is empty
		if v.isEmpty(field) {
			return nil
		}
	}
	
	return nil
}

func (v *Validator) isEmpty(field reflect.Value) bool {
	switch field.Kind() {
	case reflect.String:
		return field.String() == ""
	case reflect.Slice, reflect.Map, reflect.Array:
		return field.Len() == 0
	case reflect.Ptr, reflect.Interface:
		return field.IsNil()
	default:
		return false
	}
}

func (v *Validator) isValidEmail(email string) bool {
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`)
	return emailRegex.MatchString(email)
}

func getFieldName(field reflect.StructField) string {
	jsonTag := field.Tag.Get("json")
	if jsonTag != "" && jsonTag != "-" {
		parts := strings.Split(jsonTag, ",")
		return parts[0]
	}
	return strings.ToLower(field.Name)
}