package middleware

import (
	"net/http"
	"sync"
	"time"

	"{{.ModuleName}}/internal/api/responses"
)

type RateLimitMiddleware struct {
	requests map[string][]time.Time
	mutex    sync.RWMutex
	limit    int
	window   time.Duration
}

func NewRateLimitMiddleware(limit int, window time.Duration) *RateLimitMiddleware {
	middleware := &RateLimitMiddleware{
		requests: make(map[string][]time.Time),
		limit:    limit,
		window:   window,
	}

	// Start cleanup goroutine
	go middleware.cleanup()

	return middleware
}

func (m *RateLimitMiddleware) Handler(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		clientIP := getClientIP(r)
		
		if !m.isAllowed(clientIP) {
			responses.Error(w, http.StatusTooManyRequests, "Rate limit exceeded", nil)
			return
		}

		next.ServeHTTP(w, r)
	})
}

func (m *RateLimitMiddleware) isAllowed(clientIP string) bool {
	m.mutex.Lock()
	defer m.mutex.Unlock()

	now := time.Now()
	windowStart := now.Add(-m.window)

	// Get existing requests for this IP
	requests, exists := m.requests[clientIP]
	if !exists {
		requests = make([]time.Time, 0)
	}

	// Filter out requests outside the current window
	validRequests := make([]time.Time, 0)
	for _, reqTime := range requests {
		if reqTime.After(windowStart) {
			validRequests = append(validRequests, reqTime)
		}
	}

	// Check if limit is exceeded
	if len(validRequests) >= m.limit {
		return false
	}

	// Add current request
	validRequests = append(validRequests, now)
	m.requests[clientIP] = validRequests

	return true
}

func (m *RateLimitMiddleware) cleanup() {
	ticker := time.NewTicker(m.window)
	defer ticker.Stop()

	for range ticker.C {
		m.mutex.Lock()
		now := time.Now()
		windowStart := now.Add(-m.window)

		for ip, requests := range m.requests {
			validRequests := make([]time.Time, 0)
			for _, reqTime := range requests {
				if reqTime.After(windowStart) {
					validRequests = append(validRequests, reqTime)
				}
			}

			if len(validRequests) == 0 {
				delete(m.requests, ip)
			} else {
				m.requests[ip] = validRequests
			}
		}
		m.mutex.Unlock()
	}
}

func getClientIP(r *http.Request) string {
	// Check X-Forwarded-For header
	if xff := r.Header.Get("X-Forwarded-For"); xff != "" {
		return xff
	}

	// Check X-Real-IP header
	if xri := r.Header.Get("X-Real-IP"); xri != "" {
		return xri
	}

	// Fall back to remote address
	return r.RemoteAddr
}