package handlers

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	"{{.ModuleName}}/internal/api/responses"
	"{{.ModuleName}}/internal/domain/user"
	"{{.ModuleName}}/internal/pkg/validator"
)

type UserHandler struct {
	userService user.Service
	validator   *validator.Validator
}

func NewUserHandler(userService user.Service, validator *validator.Validator) *UserHandler {
	return &UserHandler{
		userService: userService,
		validator:   validator,
	}
}

type UpdateUserRequest struct {
	Name  string `json:"name" validate:"omitempty,min=2,max=100"`
	Email string `json:"email" validate:"omitempty,email"`
}

// GetUsers godoc
// @Summary Get all users
// @Description Get a list of all users with pagination
// @Tags users
// @Accept json
// @Produce json
// @Param page query int false "Page number" default(1)
// @Param limit query int false "Items per page" default(10)
// @Success 200 {object} responses.SuccessResponse
// @Failure 500 {object} responses.ErrorResponse
// @Security BearerAuth
// @Router /users [get]
func (h *UserHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	page, _ := strconv.Atoi(r.URL.Query().Get("page"))
	if page < 1 {
		page = 1
	}

	limit, _ := strconv.Atoi(r.URL.Query().Get("limit"))
	if limit < 1 || limit > 100 {
		limit = 10
	}

	users, total, err := h.userService.GetAll(r.Context(), page, limit)
	if err != nil {
		responses.Error(w, http.StatusInternalServerError, "Failed to fetch users", err)
		return
	}

	responses.Success(w, http.StatusOK, "Users retrieved successfully", map[string]interface{}{
		"users": users,
		"pagination": map[string]interface{}{
			"page":  page,
			"limit": limit,
			"total": total,
		},
	})
}

// GetUser godoc
// @Summary Get user by ID
// @Description Get a specific user by their ID
// @Tags users
// @Accept json
// @Produce json
// @Param id path int true "User ID"
// @Success 200 {object} responses.SuccessResponse
// @Failure 400 {object} responses.ErrorResponse
// @Failure 404 {object} responses.ErrorResponse
// @Security BearerAuth
// @Router /users/{id} [get]
func (h *UserHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.ParseInt(vars["id"], 10, 64)
	if err != nil {
		responses.Error(w, http.StatusBadRequest, "Invalid user ID", err)
		return
	}

	user, err := h.userService.GetByID(r.Context(), id)
	if err != nil {
		responses.Error(w, http.StatusNotFound, "User not found", err)
		return
	}

	responses.Success(w, http.StatusOK, "User retrieved successfully", map[string]interface{}{
		"user": user,
	})
}

// UpdateUser godoc
// @Summary Update user
// @Description Update user information
// @Tags users
// @Accept json
// @Produce json
// @Param id path int true "User ID"
// @Param request body UpdateUserRequest true "Update user request"
// @Success 200 {object} responses.SuccessResponse
// @Failure 400 {object} responses.ErrorResponse
// @Failure 404 {object} responses.ErrorResponse
// @Security BearerAuth
// @Router /users/{id} [put]
func (h *UserHandler) UpdateUser(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.ParseInt(vars["id"], 10, 64)
	if err != nil {
		responses.Error(w, http.StatusBadRequest, "Invalid user ID", err)
		return
	}

	var req UpdateUserRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		responses.Error(w, http.StatusBadRequest, "Invalid request body", err)
		return
	}

	if err := h.validator.Validate(req); err != nil {
		responses.ValidationError(w, err)
		return
	}

	updatedUser, err := h.userService.Update(r.Context(), id, &user.User{
		Name:  req.Name,
		Email: req.Email,
	})
	if err != nil {
		responses.Error(w, http.StatusNotFound, "Failed to update user", err)
		return
	}

	responses.Success(w, http.StatusOK, "User updated successfully", map[string]interface{}{
		"user": updatedUser,
	})
}

// DeleteUser godoc
// @Summary Delete user
// @Description Delete a user by ID
// @Tags users
// @Accept json
// @Produce json
// @Param id path int true "User ID"
// @Success 200 {object} responses.SuccessResponse
// @Failure 400 {object} responses.ErrorResponse
// @Failure 404 {object} responses.ErrorResponse
// @Security BearerAuth
// @Router /users/{id} [delete]
func (h *UserHandler) DeleteUser(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.ParseInt(vars["id"], 10, 64)
	if err != nil {
		responses.Error(w, http.StatusBadRequest, "Invalid user ID", err)
		return
	}

	err = h.userService.Delete(r.Context(), id)
	if err != nil {
		responses.Error(w, http.StatusNotFound, "Failed to delete user", err)
		return
	}

	responses.Success(w, http.StatusOK, "User deleted successfully", nil)
}