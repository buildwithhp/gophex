#!/bin/bash

# Change Detection Script for {{.ProjectName}}
# This script helps detect manual modifications to generated code

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
METADATA_FILE=".gophex-generated"
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}[DETECT]${NC} $1"
}

# Check if this is a generated project
check_generated_project() {
    if [ ! -f "$METADATA_FILE" ]; then
        print_error "This doesn't appear to be a Gophex-generated project"
        print_info "Missing metadata file: $METADATA_FILE"
        exit 1
    fi
    
    print_info "‚úÖ Gophex-generated project detected"
    
    # Read metadata
    local generated_at=$(grep "generated_at=" "$METADATA_FILE" | cut -d'=' -f2)
    local project_type=$(grep "project_type=" "$METADATA_FILE" | cut -d'=' -f2)
    local database_type=$(grep "database_type=" "$METADATA_FILE" | cut -d'=' -f2)
    
    echo "  üìÖ Generated: $generated_at"
    echo "  üèóÔ∏è  Type: $project_type"
    echo "  üóÑÔ∏è  Database: $database_type"
}

# Detect Git-based changes
detect_git_changes() {
    print_header "Checking Git history for manual changes..."
    
    if [ ! -d ".git" ]; then
        print_warning "No Git repository found - cannot detect commit-based changes"
        return
    fi
    
    local generated_at=$(grep "generated_at=" "$METADATA_FILE" | cut -d'=' -f2)
    local commits_since=$(git log --oneline --since="$generated_at" --grep="gophex" --invert-grep 2>/dev/null | wc -l)
    
    if [ "$commits_since" -gt 0 ]; then
        print_warning "‚ö†Ô∏è  Found $commits_since manual commits since generation"
        echo "Recent manual commits:"
        git log --oneline --since="$generated_at" --grep="gophex" --invert-grep -5 2>/dev/null || true
    else
        print_info "‚úÖ No manual commits detected since generation"
    fi
}

# Detect file modification times
detect_file_changes() {
    print_header "Checking file modification times..."
    
    local generated_files=$(grep "generated_files=" "$METADATA_FILE" | cut -d'=' -f2)
    local generated_at=$(grep "generated_at=" "$METADATA_FILE" | cut -d'=' -f2)
    local generated_timestamp=$(date -d "$generated_at" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%S" "${generated_at%Z*}" +%s 2>/dev/null || echo "0")
    
    local modified_files=()
    
    IFS=',' read -ra FILES <<< "$generated_files"
    for file in "${FILES[@]}"; do
        if [ -f "$file" ]; then
            local file_timestamp=$(stat -c %Y "$file" 2>/dev/null || stat -f %m "$file" 2>/dev/null || echo "0")
            if [ "$file_timestamp" -gt "$generated_timestamp" ]; then
                modified_files+=("$file")
            fi
        fi
    done
    
    if [ ${#modified_files[@]} -gt 0 ]; then
        print_warning "‚ö†Ô∏è  Found ${#modified_files[@]} files modified since generation:"
        for file in "${modified_files[@]}"; do
            echo "  üìù $file"
        done
    else
        print_info "‚úÖ No file timestamp changes detected"
    fi
}

# Detect custom code patterns
detect_custom_patterns() {
    print_header "Scanning for custom code patterns..."
    
    local custom_patterns=(
        "// CUSTOM:"
        "// TODO:"
        "// FIXME:"
        "// USER-ADDED:"
        "// MANUAL:"
    )
    
    local found_patterns=()
    
    for pattern in "${custom_patterns[@]}"; do
        local matches=$(grep -r "$pattern" . --exclude-dir=.git --exclude="*.log" 2>/dev/null | wc -l)
        if [ "$matches" -gt 0 ]; then
            found_patterns+=("$pattern ($matches matches)")
        fi
    done
    
    if [ ${#found_patterns[@]} -gt 0 ]; then
        print_warning "‚ö†Ô∏è  Found custom code markers:"
        for pattern in "${found_patterns[@]}"; do
            echo "  üè∑Ô∏è  $pattern"
        done
    else
        print_info "‚úÖ No custom code markers found"
    fi
}

# Detect non-template imports
detect_custom_imports() {
    print_header "Checking for custom imports..."
    
    local template_imports=(
        "github.com/gorilla/mux"
        "github.com/lib/pq"
        "github.com/go-sql-driver/mysql"
        "go.mongodb.org/mongo-driver"
        "gopkg.in/yaml.v3"
    )
    
    local custom_imports=()
    
    # Find all import statements
    local all_imports=$(grep -r "import.*github.com\|import.*go\." . --include="*.go" --exclude-dir=vendor 2>/dev/null | grep -v "^Binary" | cut -d'"' -f2 | sort -u)
    
    while IFS= read -r import_line; do
        if [ -n "$import_line" ]; then
            local is_template=false
            for template_import in "${template_imports[@]}"; do
                if [[ "$import_line" == *"$template_import"* ]]; then
                    is_template=true
                    break
                fi
            done
            
            if [ "$is_template" = false ]; then
                custom_imports+=("$import_line")
            fi
        fi
    done <<< "$all_imports"
    
    if [ ${#custom_imports[@]} -gt 0 ]; then
        print_warning "‚ö†Ô∏è  Found ${#custom_imports[@]} custom imports:"
        for import in "${custom_imports[@]}"; do
            echo "  üì¶ $import"
        done
    else
        print_info "‚úÖ No custom imports detected"
    fi
}

# Detect database schema changes
detect_schema_changes() {
    print_header "Checking for database schema modifications..."
    
    local migration_dir="migrations"
    local custom_migrations=()
    
    if [ -d "$migration_dir" ]; then
        # Look for migration files not in the original template
        local template_migrations=(
            "000001_create_users_table"
            "000002_create_posts_table"
            "mongodb_init.js"
        )
        
        for migration_file in "$migration_dir"/*; do
            if [ -f "$migration_file" ]; then
                local filename=$(basename "$migration_file")
                local is_template=false
                
                for template_migration in "${template_migrations[@]}"; do
                    if [[ "$filename" == *"$template_migration"* ]]; then
                        is_template=true
                        break
                    fi
                done
                
                if [ "$is_template" = false ]; then
                    custom_migrations+=("$filename")
                fi
            fi
        done
        
        if [ ${#custom_migrations[@]} -gt 0 ]; then
            print_warning "‚ö†Ô∏è  Found ${#custom_migrations[@]} custom migration files:"
            for migration in "${custom_migrations[@]}"; do
                echo "  üóÑÔ∏è  $migration"
            done
        else
            print_info "‚úÖ No custom migrations detected"
        fi
    else
        print_info "No migrations directory found"
    fi
}

# Generate change report
generate_report() {
    print_header "üìä Change Detection Summary"
    echo ""
    echo "Project: {{.ProjectName}}"
    echo "Scan Date: $(date)"
    echo "Generated: $(grep "generated_at=" "$METADATA_FILE" | cut -d'=' -f2)"
    echo ""
    
    # Check if any changes were detected
    local has_changes=false
    
    # Re-run checks silently to determine status
    if git log --oneline --since="$(grep "generated_at=" "$METADATA_FILE" | cut -d'=' -f2)" --grep="gophex" --invert-grep 2>/dev/null | grep -q .; then
        has_changes=true
    fi
    
    if grep -r "// CUSTOM:\|// TODO:\|// FIXME:" . --exclude-dir=.git >/dev/null 2>&1; then
        has_changes=true
    fi
    
    if [ "$has_changes" = true ]; then
        print_warning "‚ö†Ô∏è  MANUAL CHANGES DETECTED"
        echo "   This project has been manually modified since generation."
        echo "   Please review changes carefully before applying updates."
        echo ""
        echo "   Recommended actions:"
        echo "   1. Review all detected changes"
        echo "   2. Document custom modifications"
        echo "   3. Use step-by-step updates for safety"
    else
        print_info "‚úÖ NO MANUAL CHANGES DETECTED"
        echo "   This project appears to be in its original generated state."
        echo "   Updates can be applied safely."
    fi
}

# Main execution
main() {
    echo "üîç Gophex Change Detection Tool"
    echo "================================"
    echo ""
    
    cd "$PROJECT_ROOT"
    
    check_generated_project
    echo ""
    
    detect_git_changes
    echo ""
    
    detect_file_changes
    echo ""
    
    detect_custom_patterns
    echo ""
    
    detect_custom_imports
    echo ""
    
    detect_schema_changes
    echo ""
    
    generate_report
}

# Run main function
main "$@"