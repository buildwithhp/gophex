{{if eq .DatabaseConfig.Type "mongodb"}}
// MongoDB initialization script for {{.ProjectName}}
// Run this script to set up initial collections and indexes

// Switch to the application database
use('{{.DatabaseConfig.DatabaseName}}');

// Create users collection with validation schema
db.createCollection("users", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["email", "username", "passwordHash"],
      properties: {
        email: {
          bsonType: "string",
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
          description: "must be a valid email address"
        },
        username: {
          bsonType: "string",
          minLength: 3,
          maxLength: 50,
          description: "must be a string between 3-50 characters"
        },
        passwordHash: {
          bsonType: "string",
          description: "must be a string"
        },
        firstName: {
          bsonType: "string",
          description: "must be a string if provided"
        },
        lastName: {
          bsonType: "string",
          description: "must be a string if provided"
        },
        isActive: {
          bsonType: "bool",
          description: "must be a boolean"
        },
        createdAt: {
          bsonType: "date",
          description: "must be a date"
        },
        updatedAt: {
          bsonType: "date",
          description: "must be a date"
        }
      }
    }
  }
});

// Create indexes for users collection
db.users.createIndex({ "email": 1 }, { unique: true });
db.users.createIndex({ "username": 1 }, { unique: true });
db.users.createIndex({ "isActive": 1 });
db.users.createIndex({ "createdAt": 1 });

// Create posts collection with validation schema
db.createCollection("posts", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["title", "authorId"],
      properties: {
        title: {
          bsonType: "string",
          minLength: 1,
          maxLength: 255,
          description: "must be a string between 1-255 characters"
        },
        content: {
          bsonType: "string",
          description: "must be a string if provided"
        },
        authorId: {
          bsonType: "objectId",
          description: "must be a valid ObjectId"
        },
        slug: {
          bsonType: "string",
          description: "must be a string if provided"
        },
        status: {
          bsonType: "string",
          enum: ["draft", "published", "archived"],
          description: "must be one of: draft, published, archived"
        },
        publishedAt: {
          bsonType: "date",
          description: "must be a date if provided"
        },
        createdAt: {
          bsonType: "date",
          description: "must be a date"
        },
        updatedAt: {
          bsonType: "date",
          description: "must be a date"
        }
      }
    }
  }
});

// Create indexes for posts collection
db.posts.createIndex({ "authorId": 1 });
db.posts.createIndex({ "slug": 1 }, { unique: true, sparse: true });
db.posts.createIndex({ "status": 1 });
db.posts.createIndex({ "publishedAt": 1 });
db.posts.createIndex({ "createdAt": 1 });
db.posts.createIndex({ "title": "text", "content": "text" }); // Text search index

print("MongoDB collections and indexes created successfully!");
print("Database: {{.DatabaseConfig.DatabaseName}}");
print("Collections: users, posts");
print("Indexes: email, username, authorId, slug, status, publishedAt, createdAt, text search");
{{end}}