package database

import (
	"context"
	"fmt"

	"{{.ModuleName}}/internal/pkg/logger"
)

// NewDatabase creates a new database instance based on configuration
func NewDatabase(config *Config, logger logger.Logger) (Database, error) {
	switch config.Type {
{{if eq .DatabaseConfig.Type "mongodb"}}
	case "mongodb":
		return NewMongoDatabase(config, logger), nil
{{else}}
	case "postgresql", "mysql":
		return NewSQLDatabase(config, logger), nil
{{end}}
	default:
		return nil, fmt.Errorf("unsupported database type: %s", config.Type)
	}
}

// InitializeDatabase creates and connects to the database
func InitializeDatabase(ctx context.Context, logger logger.Logger) (Database, error) {
	config := NewConfig()
	
	db, err := NewDatabase(config, logger)
	if err != nil {
		return nil, fmt.Errorf("failed to create database instance: %w", err)
	}

	if err := db.Connect(ctx); err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	return db, nil
}